#!/bin/bash

# Download Extension
extension_setup() {
  ps_analysis_tool_version=v0.4.2
  extension_dir="/var/tmp"
  cd $extension_dir
  if [ ! -d $extension_dir/ps-analysis-tool-$ps_analysis_tool_version ]; then
    mkdir -p $extension_dir/ps-analysis-tool-$ps_analysis_tool_version
    curl -L -O -s  https://github.com/GoogleChromeLabs/ps-analysis-tool/releases/download/$ps_analysis_tool_version/extension-$ps_analysis_tool_version.zip
    unzip -qo extension-$ps_analysis_tool_version.zip -d $extension_dir/ps-analysis-tool-$ps_analysis_tool_version
  fi
  cd -
}

# Detect OS
if [[ "$(uname)" == "Darwin" ]]; then
  # Loads Chrome with a temporary profile that is deleted after Chrome is closed
  launch_chrome() {
      local CHROME_PATH="/Applications/Google Chrome.app"
      local DATA_DIR="$(mktemp -d '/tmp/chrome_data_dir.XXXXXXXXXX')"
      open -W -na "${CHROME_PATH}" --args \
          --disable-sync \
          --no-default-browser-check \
          --no-first-run \
          --start-maximized \
          --auto-open-devtools-for-tabs \
          --user-data-dir="${DATA_DIR}" \
          --silent-debugger-extension-api \
          "$@" https://example.com >/dev/null 2>&1 && rm -rf "${DATA_DIR}" &
  }
elif [[ "$(uname)" == "Linux" ]]; then
  # Loads Chrome with a temporary profile that is deleted after Chrome is closed
  launch_chrome() {
    local CHROME="google-chrome"
    local DATA_DIR="$(mktemp -d '/tmp/chrome_data_dir.XXXXXXXXXX')"
    "${CHROME}" \
        --disable-sync \
        --no-default-browser-check \
        --no-first-run \
        --start-maximized \
        --auto-open-devtools-for-tabs \
        --user-data-dir="${DATA_DIR}" \
        --silent-debugger-extension-api \
        "$@" https://example.com >/dev/null 2>&1 && rm -rf "${DATA_DIR}" &
    }
fi

# Launch default chrome
chrome-default() {
  launch_chrome \
    --install-autogenerated-theme='255,51,51'
}

# Launch default chrome with 3rd Party Cookie Phaseout
chrome-3pcd() {
  launch_chrome \
    --install-autogenerated-theme='150,220,150' \
    --test-third-party-cookie-phaseout \
    --enable-features="FirstPartySets,StorageAccessAPI,StorageAccessAPIForOriginExtension,PageInfoCookiesSubpage,PrivacySandboxFirstPartySetsUI,TpcdMetadataGrants,TpcdSupportSettings,TpcdHeuristicsGrants:TpcdReadHeuristicsGrants/true/TpcdWritePopupCurrentInteractionHeuristicsGrants/30d/TpcdBackfillPopupHeuristicsGrants/30d/TpcdPopupHeuristicEnableForIframeInitiator/all/TpcdWriteRedirectHeuristicGrants/15m/TpcdRedirectHeuristicRequireABAFlow/true/TpcdRedirectHeuristicRequireCurrentInteraction/true"
}

# Launch default chrome with Privacy Sandbox extension
chrome-default-ps() {
  extension_setup
  launch_chrome \
    --install-autogenerated-theme='255,51,51' \
    --load-extension="$extension_dir/ps-analysis-tool-$ps_analysis_tool_version/extension/"
}

# Launch default chrome with 3rd Party Cookie Phaseout with Privacy Sandbox extension
chrome-3pcd-ps() {
  extension_setup
  launch_chrome \
    --install-autogenerated-theme='150,220,150' \
    --test-third-party-cookie-phaseout \
    --load-extension="$extension_dir/ps-analysis-tool-$ps_analysis_tool_version/extension" \
    --enable-features="FirstPartySets,StorageAccessAPI,StorageAccessAPIForOriginExtension,PageInfoCookiesSubpage,PrivacySandboxFirstPartySetsUI,TpcdMetadataGrants,TpcdSupportSettings,TpcdHeuristicsGrants:TpcdReadHeuristicsGrants/true/TpcdWritePopupCurrentInteractionHeuristicsGrants/30d/TpcdBackfillPopupHeuristicsGrants/30d/TpcdPopupHeuristicEnableForIframeInitiator/all/TpcdWriteRedirectHeuristicGrants/15m/TpcdRedirectHeuristicRequireABAFlow/true/TpcdRedirectHeuristicRequireCurrentInteraction/true"
}

# Launch default chrome with Partitioned Cookies
chrome-chip() {
  launch_chrome \
    --partitioned-cookies=true
}
